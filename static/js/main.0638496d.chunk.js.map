{"version":3,"sources":["components/CircleSelector/CircleSelector.js","components/Circles/Circles.js","App.js","serviceWorker.js","index.js"],"names":["CircleSelector","props","react_default","a","createElement","className","onClick","handleClick1","button1Selected","handleClick2","button2Selected","handleClick3","button3Selected","handleClick4","button4Selected","Circles","App","state","_this","setState","handleReset","components_CircleSelector_CircleSelector","this","components_Circles_Circles","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAaeA,eAVQ,SAACC,GACpB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAQE,QAASL,EAAMM,aAAcF,UAAWJ,EAAMO,gBAAkB,WAAa,cAArF,mBACAN,EAAAC,EAAAC,cAAA,UAAQE,QAASL,EAAMQ,aAAcJ,UAAWJ,EAAMS,gBAAkB,WAAa,cAArF,mBACAR,EAAAC,EAAAC,cAAA,UAAQE,QAASL,EAAMU,aAAcN,UAAWJ,EAAMW,gBAAkB,WAAa,cAArF,mBACAV,EAAAC,EAAAC,cAAA,UAAQE,QAASL,EAAMY,aAAcR,UAAWJ,EAAMa,gBAAkB,WAAa,cAArF,sBCIGC,SAVC,SAACd,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAMO,gBAAkB,WAAa,cAArD,KACAN,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAMS,gBAAkB,WAAa,cAArD,KACAR,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAMW,gBAAkB,WAAa,cAArD,KACAV,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAMa,gBAAkB,WAAa,cAArD,QC2DGE,6MA5DbC,MAAQ,CACNT,iBAAkB,EAClBE,iBAAkB,EAClBE,iBAAkB,EAClBE,iBAAkB,KAKtBP,aAAe,WACbW,EAAKD,MAAMT,gBAAkBU,EAAKC,SAAS,CAACX,iBAAiB,IAAUU,EAAKC,SAAS,CAACX,iBAAiB,OAEzGC,aAAe,WACbS,EAAKD,MAAMP,gBAAkBQ,EAAKC,SAAS,CAACT,iBAAiB,IAAUQ,EAAKC,SAAS,CAACT,iBAAiB,OAEzGC,aAAe,WACbO,EAAKD,MAAML,gBAAkBM,EAAKC,SAAS,CAACP,iBAAiB,IAAUM,EAAKC,SAAS,CAACP,iBAAiB,OAEzGC,aAAe,WACbK,EAAKD,MAAMH,gBAAkBI,EAAKC,SAAS,CAACL,iBAAiB,IAAUI,EAAKC,SAAS,CAACL,iBAAiB,OAGzGM,YAAc,WACZF,EAAKC,SAAS,CACZX,iBAAiB,EACjBE,iBAAiB,EACjBE,iBAAiB,EACjBE,iBAAiB,6EAMjB,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,2BACAH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACiB,EAAD,CACEb,gBAAiBc,KAAKL,MAAMT,gBAC5BE,gBAAiBY,KAAKL,MAAMP,gBAC5BE,gBAAiBU,KAAKL,MAAML,gBAC5BE,gBAAiBQ,KAAKL,MAAMH,gBAC5BP,aAAce,KAAKf,aACnBE,aAAca,KAAKb,aACnBE,aAAcW,KAAKX,aACnBE,aAAcS,KAAKT,eAErBX,EAAAC,EAAAC,cAACmB,EAAD,CACEf,gBAAiBc,KAAKL,MAAMT,gBAC5BE,gBAAiBY,KAAKL,MAAMP,gBAC5BE,gBAAiBU,KAAKL,MAAML,gBAC5BE,gBAAiBQ,KAAKL,MAAMH,kBAE9BZ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWC,QAASgB,KAAKF,aAA3C,kBAvDQI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0638496d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './CircleSelector.css'\n\nconst CircleSelector = (props) => {\n    return (\n        <div className=\"CircleSelector\">\n            <button onClick={props.handleClick1} className={props.button1Selected ? 'selected' : 'unselected'}>Select Circle 1</button>\n            <button onClick={props.handleClick2} className={props.button2Selected ? 'selected' : 'unselected'}>Select Circle 2</button>\n            <button onClick={props.handleClick3} className={props.button3Selected ? 'selected' : 'unselected'}>Select Circle 3</button>\n            <button onClick={props.handleClick4} className={props.button4Selected ? 'selected' : 'unselected'}>Select Circle 4</button>\n        </div>\n    )\n}\nexport default CircleSelector","import React, { Component } from 'react';\nimport './Circles.css';\n\nconst Circles = (props) => {\n    return (\n        <div className=\"Circles\">\n            <div className={props.button1Selected ? 'selected' : 'unselected'}>1</div>\n            <div className={props.button2Selected ? 'selected' : 'unselected'}>2</div>\n            <div className={props.button3Selected ? 'selected' : 'unselected'}>3</div>\n            <div className={props.button4Selected ? 'selected' : 'unselected'}>4</div>\n        </div>\n    )\n}\nexport default Circles","import React, { Component } from 'react';\nimport './App.css';\nimport CircleSelector from './components/CircleSelector/CircleSelector';\nimport Circles from './components/Circles/Circles';\n\n\nclass App extends Component {\n\n  state = {\n    button1Selected : false,\n    button2Selected : false,\n    button3Selected : false,\n    button4Selected : false,\n  }\n\n/*-----------------Event Handlers----------------*/ \n\nhandleClick1 = () => {    \n  this.state.button1Selected ? this.setState({button1Selected: false}) : this.setState({button1Selected: true}); \n}\nhandleClick2 = () => {    \n  this.state.button2Selected ? this.setState({button2Selected: false}) : this.setState({button2Selected: true}); \n}\nhandleClick3 = () => {    \n  this.state.button3Selected ? this.setState({button3Selected: false}) : this.setState({button3Selected: true}); \n}\nhandleClick4 = () => {    \n  this.state.button4Selected ? this.setState({button4Selected: false}) : this.setState({button4Selected: true}); \n}\n\nhandleReset = () => {\n  this.setState({\n    button1Selected: false,\n    button2Selected: false,\n    button3Selected: false,\n    button4Selected: false,\n    });\n}\n\n/*-----------------Render Method----------------*/ \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n        <main>\n          <CircleSelector \n            button1Selected={this.state.button1Selected}\n            button2Selected={this.state.button2Selected}\n            button3Selected={this.state.button3Selected}\n            button4Selected={this.state.button4Selected}\n            handleClick1={this.handleClick1}\n            handleClick2={this.handleClick2}\n            handleClick3={this.handleClick3}\n            handleClick4={this.handleClick4}\n          />\n          <Circles \n            button1Selected={this.state.button1Selected}\n            button2Selected={this.state.button2Selected}\n            button3Selected={this.state.button3Selected}\n            button4Selected={this.state.button4Selected}\n          />\n          <button className=\"resetBtn\" onClick={this.handleReset}>RESET</button>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}